"""
关于列表和链表


链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。
链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。
每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。
相比于线性表顺序结构，操作复杂。
由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，
但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而线性表和顺序表相应的时间复杂度分别是O(logn)和O(1)。

列表:
	优势:随机访问的时间复杂度是O1
	劣势:
	1.增删的时候会产生所有元素的移动,那么时间复杂度就变成O的n次方( O(n) )
	2.动态列表(指内存内储区满的情况下,会重新分配一个"连续"的足够大的新的内存空间),原有的元素整体拷贝;
应用场景:随机访问频繁,并且增删不频繁的情况下

链表:
	优势:不需要连续的内存空间,可以合理化利用零散的内存;


数据结构:数据,关系
线性表(有序):数据,前后有序的关系
    -顺序表(物理有序)
	-链表(逻辑有序)
"""

"""
链表的认识
"""


class Node(object):
    """节点"""
    def __init__(self, data):
        self.data = data
        self.next = None


if __name__ == '__main__':
    # 创建
    node1 = Node(1)
    node2 = Node(2)
    node3 = Node(3)

    # 链起来
    node1.next = node2
    node2.next = node3

    # 指定头
    head = node1

    # 输出
    print(head.data)  # 头的数据
    print(head.next.data)  # 头的下一个数据
    print(head.next.next.data)  # 头的下下一个数据

    """
    输出结果:
    1
    2
    3

    那么,这样就完成了一个链表(这个是单向链表)
    特征:有两个域,data(数据)和next(链向下一个)
    """
